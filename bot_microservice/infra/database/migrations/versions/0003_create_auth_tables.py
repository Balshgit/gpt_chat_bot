"""create_auth_tables

Revision ID: 0003_create_users_table
Revises: 0002_create_chatgpt_models
Create Date: 2023-11-28 00:58:01.984654

"""
import hashlib

import fastapi_users_db_sqlalchemy
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects.sqlite import insert

from core.auth.models.users import User
from infra.database.deps import get_sync_session
from settings.config import settings

# revision identifiers, used by Alembic.
revision = "0003_create_auth_tables"
down_revision = "0002_create_chatgpt_models"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.INTEGER(), nullable=False),
        sa.Column("email", sa.VARCHAR(length=320), nullable=True),
        sa.Column("username", sa.VARCHAR(length=32), nullable=False),
        sa.Column("hashed_password", sa.String(length=1024), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_superuser", sa.Boolean(), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_index(op.f("ix_users_username"), "users", ["username"], unique=True)
    op.create_table(
        "access_token",
        sa.Column("user_id", sa.INTEGER(), nullable=False),
        sa.Column("token", sa.String(length=43), nullable=False),
        sa.Column("created_at", fastapi_users_db_sqlalchemy.generics.TIMESTAMPAware(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="cascade"),
        sa.PrimaryKeyConstraint("token"),
    )
    op.create_index(op.f("ix_access_token_created_at"), "access_token", ["created_at"], unique=False)
    # ### end Alembic commands ###

    username, password, salt = settings.SUPERUSER, settings.SUPERUSER_PASSWORD, settings.SALT
    if not all([username, password, salt]):
        return
    with get_sync_session() as session:
        hashed_password = hashlib.sha256((password.get_secret_value() + salt.get_secret_value()).encode()).hexdigest()
        query = insert(User).values({"username": username, "hashed_password": hashed_password})
        session.execute(query)
        session.commit()


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_access_token_created_at"), table_name="access_token")
    op.drop_table("access_token")
    op.drop_index(op.f("ix_users_username"), table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###
